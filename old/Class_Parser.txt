package com.example.doc.parsing

import com.example.doc.util.TypeSeparator
import io.swagger.v3.oas.annotations.media.Schema
import org.springframework.stereotype.Component
import java.lang.reflect.Field
import java.lang.reflect.ParameterizedType
import java.lang.reflect.Type

@Component
class ClassParser() {

    /*Парсинг data класса*/
    fun extractClassInfo(clazz: Class<*>): ClassView {
        val schemaAnnotation = clazz.annotations.find { it is Schema } as? Schema

        /*поля с аннотацией field*/
        val fields = clazz.declaredFields
             .map { FieldWithAnnotation(field = it, annotation = extractAnnotationsScheme(it)) }
             .filter { it.annotation != null }

        return ClassView(
             simpleName = clazz.simpleName.toString(),
             pkg = clazz.packageName,
             description = schemaAnnotation?.description,
             fields = getAllFields(fields),
        )
    }

    /*Получение полей data класса*/
    private fun getAllFields(fields: List<FieldWithAnnotation>): List<FieldView> {
        return fields.map { extractField(it) }
    }

    /*Парсинг полей*/
    private fun extractField(fieldWithAnnotation: FieldWithAnnotation): FieldView {

        var classOfEnum: List<ClassEnumView>? = null
        var classOfComposite: ClassView? = null

        val typeField = getTypeField(fieldWithAnnotation.field)

        /*drop last для удаления из коллеции enum элементов по типу VALUE*/
        if (typeField == TypeField.ENUM) classOfEnum = extractClassEnum(fieldWithAnnotation.field.type).dropLast(2)
        if (typeField == TypeField.COMPOSITE) classOfComposite = extractClassInfo(fieldWithAnnotation.field.type)
        if (typeField == TypeField.COLLECTION_COMPOSITE) classOfComposite =
             extractClassCompositeCollection(fieldWithAnnotation.field)

        return FieldView(
             name = fieldWithAnnotation.field.name,
             type = fieldWithAnnotation.field.annotatedType.type,
             description = fieldWithAnnotation.annotation?.description,
             example = fieldWithAnnotation.annotation?.example,
             required = fieldWithAnnotation.annotation?.required,
             classOfEnum = classOfEnum,
             classOfComposite = classOfComposite
        )
    }

    /*Получение типа поля*/
    private fun getTypeField(field: Field): TypeField {
        return when {
            TypeSeparator.getPrimitiveTypes(field) -> TypeField.PRIMITIVE
            field.type.isEnum -> TypeField.ENUM
            TypeSeparator.getCollectionTypes(field) -> {
                if (TypeSeparator.checkingOnPrimitiveCollection(field)) TypeField.COLLECTION_PRIMITIVE
                else TypeField.COLLECTION_COMPOSITE
            }

            else -> TypeField.COMPOSITE
        }
    }

    /*Получение объекта уникального класса коллекции*/
    private fun extractClassCompositeCollection(field: Field): ClassView {
        return extractClassInfo((field.genericType as ParameterizedType).actualTypeArguments.first() as Class<*>)
    }


    private fun extractAnnotationsScheme(field: Field?): Schema? {
        /*
        * Поиск Schema в полях*/
        var annotationSchema = extractScheme(field?.annotations)

        /*
        *Поиск Schema в конструкторах*/
        if (annotationSchema == null) {
            val constructors = field?.declaringClass?.constructors
            constructors?.forEach { value ->
                val parameter = value.parameters.find { it.name.equals(field.name) }
                val schema = extractScheme(parameter?.annotations)
                if (schema != null) {
                    annotationSchema = schema
                }
            }
        }
        return annotationSchema
    }

    /*
    * Поиск Scheme в аннотациях*/
    private fun extractScheme(annotations: Array<Annotation>?): Schema? {
        return annotations?.find { it is Schema } as? Schema
    }


    /*
    *Парсинг enum класса*/
    private fun extractClassEnum(clazz: Class<*>): List<ClassEnumView> {
        return clazz.declaredFields.map { field ->
            ClassEnumView(
                 value = field.name,
                 description = (field.annotations.find { it is Schema } as? Schema)?.description)
        }
    }
}

data class FieldWithAnnotation(
     val field: Field,
     val annotation: Schema?
)


data class ClassEnumView(
     val value: String,
     val description: String?
)

data class ClassView(
     val simpleName: String,
     val pkg: String,
     val description: String?,
     val fields: List<FieldView>,
)

data class FieldView(
     val name: String,
     //TODO: возможно java класс Type не нужен и досточноно схрать имя-пакейт класса, чтобы значть что это такое
     val type: Type,
     val description: String?,
     val example: String?,
     val required: Boolean?,
     // сложный объект чтобы знать какой енам каким бывает
     val classOfEnum: List<ClassEnumView>?,
     // если объект составной, то тут лежит его описание
     val classOfComposite: ClassView?
)

enum class TypeField {
    PRIMITIVE, ENUM, COMPOSITE, COLLECTION_PRIMITIVE, COLLECTION_COMPOSITE
}
